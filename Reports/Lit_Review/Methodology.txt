Methodology
A large amount of research has gone into studying ways to increase sales in retail stores. Within this large area of advertising, store layout, pricing, loyalty programs, and others, we have decided to focus on two main goals for the project. The first is aisle management, and the second is product facing.
Aisle management, a term which means changing the placement of products to increase traffic, sales, and profits is one method stores use to succeed in the competitive retail market. According to Larson [1], the value of moving a product's shelf space can be estimated by tracking customer traffic within a store. Working with this higher level statistic (treating the aisle as an entity) as opposed to a categorical approach, resource costs for analysis can be reduced. Dreze et al. [2] found that on average, a 4-6% sales increase could be found by optimizing product placement. Moving a product from the least ideal to the most ideal location could have an increase in sales of up to 60 percent. Additionally, creating a layout in which customers browse more isles is important to creating sales. A study by Coca-Cola [3] found shoppers travel and average of 41 percent of the isles on a typical shopping trip. These findings prompted one of the goals of this project to be tracking customer movement through aisles. This would allow optimizations for store layout.
The second metric our team is interested in tracking is product facing. The facing of a product refers to the location and amount of shelf space is allocated to it. According to research by Chandon et al. [4], eye movement studies, shopper surveys, and field experiments have all confirmed that large increases in shelf space increase sales even when the price and location of the product stay the same. A logical extension of this is that a product's facing will not be optimal after stocks begin to be depleted by shoppers and the product does not fill the front of the shelf properly. To combat this, a common task for store clerks is to pull stock from the back of the shelf forward to create the illusion that the shelf is full. This is essentially bringing the facing of the product back to its allocated space. By tracking which products need to be faced, management and store owners can see areas which need attention at a glance without needing to travel the store personally. This data would also indirectly show popularity and out of stock problems if a clerk had faced an aisle but products are shown as missing by the sensors.
These two datasets could be useful in other applications as well, such as one that makes use of detailed models to estimate stock levels. These statistical methods use historic and current data such as order/delivery numbers, sales averages, volatility, shelf space and point of sale monitoring [5]. This type of approach is seen in systems such as KSS Retail's Heartbeat [6].

The team has chosen an incremental approach in order to create a product capable of shelf face detection and customer traffic tracking. This type of development is a combination of waterfall and iterative development methodologies [7]. These methodologies are combined by adding an iterative prototyping period after the initial investigation and requirements definition are completed in the waterfall fashion.

This type of development's strengths are:
- The project is maintained with written documentation requiring approval/sign-off at designated milestones.
- Stakeholders can be given evidence of progress
- Gradual implementation allows evaluation of each incremental change
- Well suited to projects where requirements may change due to new knowledge, technology or expectations
- Well suited to leading-edge applications

Pitfalls that must be avoided with this methodology include:
- Difficult components may be ignored until late in the project time-frame
- Well defined interfaces are crucial since not all components of the project will progress at the same rate

To accomplish the two metric tracking goals detailed above the group will be split into two teams. The first team will be focused on the hardware configuration and sensor interfacing while the second team will focus on developing the necessary software and website. 
The hardware and interfacing team's responsibilities can be broken down into to the following tangible tasks:
1.1	Determine which sensors & microcontroller are most appropriate for the chosen specifications
1.2	Design the proposed sensor configuration & initial testing
1.3	Develop interface to send data to the server
1.4	Construction of prototype
1.5	Testing of prototype
1.6	Improvement to prototype (interfacing or hardware configuration)
1.1 Determination of sensors & microcontroller
The sensor array being developed for this application is focused on embracing the IoT mantra as a main design influence. This means that the sensor network should include a number of sensors that are networked and accessible in a way that allows a full interoperability of interconnected devices..., providing them with an always higher degree of smartness by enabling their adaptation and autonomous behavior, while guaranteeing trust, privacy, and security" [8]. The required sensors will be decided upon based on IoT values, OGC standards, the technical specifications detailed by the team, and the goals of increasing sales in a retail environment.
The Sensor Web Research group at the University of Calgary [9] will be the first point of entry into deciding what sensors and microcontrollers will be used after a period of hands on experimentation with their resources. Some of these resources may be leveraged for the duration of the project. It is likely that not all of the required components for the project will be available in which case these will need to be acquired via an online vendor. A broad set of sensors may be tested for an initial investigation before the sensors for the final configuration is ordered.

1.2 Design the proposed sensor configuration & initial testing
With the technical specifications in place, a sensor configuration will be developed to meet these design requirements. The main factors to be considered are cost, effectiveness, durability, robustness, and the protection of privacy.
To meet the cost requirements, different arrangements of sensors should be examined to find the best configuration of sensors and microcontrollers. With the cost of a microcontroller board being as much or more than most sensors, a design should emphasize on providing the needed detection methods for as much area as possible per microcontroller. Varying costs of sensors such as infrared ranging, magnetometers, luminance sensors, etc, may allow different combinations to achieve the same end goal.
To be effective, sensors need to be mounted in the optimal location. Logical mounting points for customer traffic tracking depend on the type of sensor used. A more naïve solution would be to track movement past certain gates, in which case sensors at the entrances and exits to aisles would count how many customers travel through the aisle, and potentially time spent in an aisle. Adding additional sensors in the middle of the aisle could also be beneficial to increase the resolution of the statistics gathered. Another option is image based soft-biometrics, which is more expensive both in terms of price and computationally. This type of tracking uses descriptors such as height and clothing color to track people in images, even between separate cameras [10]. Data from either method will be useful in correlating the length of the aisle, the products contained in it, and the time spent in a section. Shoppers may avoid going down aisles that are too short or too long [9]. In terms of facing detection, Christenfeld [4] found that when identical products are found side by side (an allocated product facing), that consumers tend to choose the middle product. This means that for products with greater than one facing, the sensors should be located in a position that they favor the middle of the display.
Durability is a great concern with any business purchase, so the sensors must be configured in a way that is not susceptible to major wear from normal customer behavior. This durability could be the result of mounting sensors in a way that customers will not interact with them, or in a way that the sensors are protected. 
The system must be robust, so that the system can stay productive over long periods of time. In the software dealing with the sensors, functions to test and calibrate the sensors may be needed to detect and remedy errors in the system. The type of tests that each sensor will be subject to depends on the sensors used.
With any IoT implementation, privacy is of primary concern to consumers [8]. The customer traffic tracking aspect of the project is the most likely to create privacy issues. To protect consumer privacy, the system will need to be developed in such a way that people are not identifiable from the data collected. Additionally, the data collected will only be available to authorized user. 
With the sensor design and set-up tentatively chosen, an intermediate step must be taken to verify that the product will work as envisioned. This will require the sensors  to be connected to the microcontroller and data will need to be accessed to ensure that the intended behavior is abided  by. At this stage the data read from sensors does not necessarily need to be transformed, analyzed, saved, or sent anywhere. Verifying that the sensor is giving the correct output will be a large but necessary step in the design process. This will likely require some programming to read the output of the sensors as well as circuitry design.
The final part of this task is drawing up schematics for the system as it would be installed on a retail shelf based on the knowledge gained through previously completed steps. This design will be a recommendation which can be adapted as new challenges arise. The format of this design should be a technical drawing or 3D model to ensure that the envisioned product can be created in 3D space. This may highlight some flaws in design choice which can be changed or adapted before sinking significant development time into interfacing sensors or building a prototype. 
1.3 Develop interface to send data to server
Once the configuration of the sensors has been chosen, the next step will be programming the software that handles the data. This will consist of the following steps:  reading, interpreting, and temporarily storing data in a robust way; developing an interface between the server and microcontroller; testing and verification. 
Depending on the sensors used, the data may come in analog or digital format. Useful data will be streaming from multiple sensors concurrently, and along with other metrics such as time of day will likely need to be included in what is sent to the database. Depending on the timing of incoming data, temporary storage will need to be allocated and managed. Due to the relatively low computing power of some microcontrollers, memory management will be an important consideration during this step.
Collected data must be packaged and sent in a way that is useful and efficient for transferring as well as storing in the database supplied by the Sensor Web Interface for IoT Standard working group [15]. The complexity of this task will very much depend on the microcontroller used and its supported languages. Although the prototype will see a very limited amount of data transfer in practice, the design should be created with a much larger scale of transactions in mind.  
Once the interface has been developed, testing of the system as a whole can begin. This testing will ensure that the system can meet technical specifications before being built into a more permanent prototype. Testing will focus on correct results for test cases, uptime for the microcontroller, and reliability of the data being sent to the database. If any significant problems are encountered, they will be resolved before creating the system prototype.
1.4 Construction of prototype
Once the product has a set of working sensors with a database connection, construction of the prototype can begin. This will be either a purpose built shelving unit or an adaptation of an existing shelve as described in the design completed in task 1.2. Sensors will be mounted and connected to the microcontroller, which will need its internet and power supplies implemented. Any non-permanent durability enhancements can be done at this point as it will be beneficial to test these adaptations. 
1.5 Testing of prototype
Having constructed the prototype, testing will commence. To begin, testing will be done against known cases which will have been developed as part of tasks 1.2 and 1.3. To supplement this, testing will also be done to verify the system performance in a real life scenario, which will involve team members adjusting stock over long periods of time. Data collected during this testing session could potentially be used for presentation purposes so it will be organized and saved. If bugs or improvements are encountered, they will also be recorded.
1.6 Improvement of prototype
Any potential improvements or bug fixes derived from prototype testing can be added after they are verified by the team. Any changes to the hardware or software will have to be regression tested to ensure new bugs are not introduced and that the system is still functional. This will be an iterative process which will run until the project has reached completion.
Collecting data from the sensors alone is not enough to achieve the goals of the project. The team also aims to interpret and present this data by means of a website. The software and website team's tasks are as follows:
2.1	Develop interface between website and database
2.2	Testing of website/database interfaces
2.3	Design website prototype
2.4	Testing of website prototype
2.5	Improvements to website prototype and website/database interface
2.1 Develop interface between website and database
Similar to the hardware team's interfacing of the microcontroller to the server, the software team will need to interface the website and database. This should be done with security, efficiency, and robustness in mind. This task will require a small amount of website development in order to verify that the interface is working properly, but minimal time should be invested in an appealing graphical user interface (GUI) or layout issues.
2.2 Testing of website/database interfaces
Once the interface has been developed, testing should be conducted to verify that the correct queries are being made, that errors can be identified, and that the interface is reliable. This task may be done in conjunction with task 2.4, after most of the website development is done.
2.3 Design of website
Designing the website will be the major piece of work tackled by the software and website team. To begin with, the website framework must be chosen. Additionally, decisions pertaining to what browsers to support, what login model to use, update period, hosting solutions, and if the connection should be encrypted also need to be decided.  Once the basic infrastructure has been planned, the team will focus on what kind of information is valuable to users, and what the best way to present this data is. This will cover things such as what statistics can be calculated, what kind of graphics can be generated to represent these data/statistics, what kind of navigation and structure should the website use, all the while maintaining a system that is easy to expand if new functionality is required. Information that can be derived from the data collected could include things such as stagnant products, traffic to aisle facing condition, historical vs. current trends, or a variety of others. The website will be the most visible part of the project, so the experience must be polished and easy to understand.
2.4 Testing of website
The website should be tested on all supported browsers using a set of test cases as well as simulating real life conditions. Data and generated statistics need to be checked for accuracy as well as proper display. All navigation should be verified and authorization needs to be tested to ensure that user's data is secure. Feedback should also be gathered from user's outside the team to find potential improvements. 
2.5 Improvement of website and website/database interface
Any bugs or improvements noted during the testing tasks should be considered and implemented if the team agrees they are achievable and worthwhile. Outside opinions will also be considered. Again this will be an iterative process of updating and testing until the completion of the project.
 
Works Cited

[1] 	R. Larson, "Core Principles for Supermaker Aisle Management," Journal of Food Distribution Research, vol. 37, no. 1, pp. 101-105, 2006. 
[2] 	X. Dreze, S. J. Hoch and M. E. Purk, "Shelf Management and Space Elasticity," Journal of Retailing, vol. 70, no. 4, pp. 301-326, 1994. 
[3] 	""Study Finds that Consumers Shop Less than Halft the Store"," POPAI News, vol. 15, no. 4, pp. 23-25, 1991. 
[4] 	P. Chandon, H. J. W, E. T. Bradlow and S. H. Young, "Does In-Store Marketing Work? Effects of the Number and Position of Shelf Facings on Brand Attention and Evaluation at the Point of Purchase," Journal of Marketing, vol. 73, pp. 1-17, 2009. 
[5] 	P. D, "Automatic Detection of Out-Of-Shelf Products in the Retail Sector Supply Chain," [Online]. Available: http://www.dmst.aueb.gr/Documents/PhD/Phd_thesis/Papakiriakopoulos.pdf. [Accessed 10 November 2013].
[6] 	"KSS Retail," Dunnhumby, 2013. [Online]. Available: http://kssretail.com/solutions/out-of-stock-detection/. [Accessed 7 November 2013].
[7]	Department of Health & Human Services - USA, "Selecting a Development Approach", 27 March 2008. [Online]. Available: http://www.cms.gov/Research-Statistics-Data-and-Systems/CMS-Information-Technology/XLC/Downloads/SelectingDevelopmentApproach.pdf [Accessed 17 November 2013]
[8] 	L. Atzori, A. Iera and G. Morabito, "The Internet of Things: A survey," Computer Networks, no. 54, pp. 2787-2805, 2010. 
[9] 	O. G. Consortium, "Senor Web Interface for IoT SWG," 2013. [Online]. Available: http://www.opengeospatial.org/projects/groups/sweiotswg. [Accessed 22 September 2013].
[10] 	S. Denman, A. Bialkowski, C. B. Fookes and S. Sridharan, "Identifying Customer Behaviour and Dwell Time using Soft Biometrics," Video Analytics for Business Intelligence, vol. 409, pp. 199-238, 2012. 



